% \iffalse meta-comment
% !TEX program  = pdfLaTeX
%<*internal>
\iffalse
%</internal>
%<*readme>
----------------------------------------------------------------
brdcrmbs --- breadcrumbs for LaTeX
E-mail: seallred@smcm.edu
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
----------------------------------------------------------------

Breadcrumbs for LaTeX
%</readme>
%<*internal>
\fi
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
%</internal>
%<*install>
\input docstrip.tex
\keepsilent
\askforoverwritefalse
\preamble
----------------------------------------------------------------
brdcrmbs --- Breadcrumbs for LaTeX
E-mail: seallred@smcm.edu
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
----------------------------------------------------------------

\endpreamble
\postamble

Copyright (C) 2013 by Sean Allred <seallred@smcm.edu>

This work may be distributed and/or modified under the
conditions of the LaTeX Project Public License (LPPL), either
version 1.3c of this license or (at your option) any later
version.  The latest version of this license is in the file:

http://www.latex-project.org/lppl.txt

This work is "maintained" (as per LPPL maintenance status) by
You.

This work consists of the file  brdcrmbs.dtx
and the derived files           brdcrmbs.ins,
                                brdcrmbs.pdf and
                                brdcrmbs.sty.

\endpostamble
\usedir{tex/latex/brdcrmbs}
\generate{
  \file{\jobname.sty}{\from{\jobname.dtx}{package}}
}
%</install>
%<install>\endbatchfile
%<*internal>
\usedir{source/latex/brdcrmbs}
\generate{
  \file{\jobname.ins}{\from{\jobname.dtx}{install}}
}
\nopreamble\nopostamble
\usedir{doc/latex/brdcrmbs}
\generate{
  \file{README.txt}{\from{\jobname.dtx}{readme}}
}
\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
%</internal>
%<*package>
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{brdcrmbs}[2013/07/01 v0.1 Breadcrumbs implementation in LaTeX3]
\RequirePackage{xparse}
\RequirePackage{everypage}
\RequirePackage{atbegshi}
\RequirePackage{fancyhdr}
%</package>
%<*driver>
\documentclass{ltxdoc}
\usepackage[T1]{fontenc}
\usepackage{lmodern}
\usepackage{\jobname}
\usepackage[numbered]{hypdoc}
\usepackage{amsmath}
\usepackage[colorlinks]{hyperref}
\let\pushedonto\to
\EnableCrossrefs
\CodelineIndex
\RecordChanges
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
% 
%\GetFileInfo{\jobname.sty}
%
%\title{^^A
%  \textsf{brdcrmbs} --- Breadcrumbs for \LaTeX\thanks{^^A
%    This file describes version \fileversion, last revised \filedate.
%    Many thanks to the users of \TeX.SX, without whom this package
%    would be just \href{http://tex.stackexchange.com/questions/122792}
%    {a \emph{really} good question}.
%  }^^A
%}
%\author{^^A
%  Sean Allred\thanks{E-mail: \texttt{seallred@smcm.edu}}^^A
%}
%\date{Released \filedate}
%
%\maketitle
%
%\changes{v1.0}{2013/10/01}{First public release}
%
% A bread-crumb trail (or simply bread-crumbs) is
%   a popular navigational tool for programs and documents
%   that have an intrinsic hierarchical structure.
% Drawing its name from the story of Hansel~and~Gretel,
%   a trail of bread-crumbs essentially depicts your location in the hierarchy.
% Since nearly all \TeX-based documents are \emph{structured},
%   this package aims to \emph{keep track of} and \emph{summarize}
%   this structure as the document progresses.
% This package is designed to keep meticulous track of the structure internally,
%   displaying this data only how and when desired.
% Taking advantage of the separation of content and data in \LaTeX3,
%   this package aims to be mainly output-agnostic.
%
% \section{Functional Description}
% This package works by maintaining a stack of the sectioning commands that apply to the content at any point in the document.
% For each sectioning command, a weight is determined automatically by a \LaTeX3 function written by \texttt{@egreg}.
% Upon initialization, the package creates two stacks, $R$ and $W$, that maintain a stack of references (token lists)^^A
%   \footnote{This probably needs more explanation.  For each sectioning command, we will cause \TeX{} to automatically insert a reference \verb|\textbackslash ref{<r>}| into the input stream for \TeX{} to process.  This reference $r$ is pushed onto the stack.}
%   and a stack of their determined weights (integers).
% Immediately, the values \verb|minvalue| and \verb|null| are pushed onto $W$ and $R$, respectively.
%
% Upon each use of a sectioning command, the package determines its weight $w$ and its reference $r$.
% Say the top of each stack is $r_0$ and $w_0$.
% If (and only if) $w \leq w_0$, we pop both stacks $R$ and $W$ so that $r_0$ and $w_0$ are discarded.
% Whether or not the stacks are popped, $r \pushedonto R$ and $w \pushedonto W$
% This entire algorithm is encapsulated in a function and is hooked onto each specified sectioning command.
%
% \section{Usage}
%\DescribeMacro{\BreadcrumbSet}
% Some text about an example macro called \cs{BreadcrumbSet},
%   which might have an optional argument \oarg{arg1} and mandatory one \marg{options}.
% \section{Expansion}
% Since the data is maintained separately from any specific implementation,
%   this package is easily customized to a whim.
% However, while the end-user interface is in the style of \LaTeXe,
%   this level of customization requires knowledge of \LaTeX 3 syntax, specifically \textsl{l3seq}.
% \DescribeMacro{\bc\_describe\_output:Nn}
% Arg 1 is a name for the output, Arg 2 is handler that takes the sequence \cs{g\_breadcrumb\_stack} and builds output from it.
% \emph{While you have access to this variable, don't screw it up.}
% I have not yet convinced myself this is even a good idea -- I may use the \cs{l} prefix and copy it over to that before giving it to you, negating loss of data.
%
%\StopEventually{^^A
%  \PrintChanges
%  \PrintIndex
%}
%
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
% \begin{macro}{\BCSet}
% And stuff
%    \begin{macrocode}
\NewDocumentCommand{\BCSet}{m}
 {
  \keys_set:n { #1 }
 }
%    \end{macrocode}
% \end{macro}
%\begin{macro}{\examplemacro}
%\changes{v1.0}{2009/10/06}{Some change from the previous version}
%    \begin{macrocode}
\newcommand*\examplemacro[2][]{%
  Some code here, probably
}
%    \end{macrocode}
%\end{macro} 
%    \begin{macrocode}


\ExplSyntaxOn

% The data structure to hold the breadcrumbs
\seq_new:N \breadcrumb_stack

% The current depth of the breadcrumb stack. 
\int_new:N \g_breadcrumb_depth_int
\int_set:Nn \g_breadcrumb_depth_int { -1 }
%    Part: 0
% Chapter: 1
% Section: 2
%  etc, etc.

% Pushes a reference onto the stack with a depth.

% 1. Receive (d_int, r_tl) from argument list
% 2. Is \g_breadcrumb_depth_int >= d_int?
%    T1. Pop the stack
%    T2. Update the value of \g_breadcrumb_depth_int to be d_int
% 3. Push the argument

% \breadcrumb_stack_push { 2 } { breadcrumb:section:1 }
\cs_new_protected:Npn \breadcrumb_stack_push:Nn #1 #2
 {
  \int_compare:nTG { \g_breadcrumb_depth_int >= #1 }
   {
    \seq_gpop:NN \breadcrumb_stack_seq \l_tmpa_tl
    \int_set:Nn \g_breadcrumb_depth_int { #1 }
   }
   { }
  \seq_gpush:Nn \breadcrumb_stack_seq { #2 }
 }

% a bunch of help from egreg again, 40613
\cs_new_protected:Npn \breadcrumb_build_breadcrumb
 {
% The main stack contains the most recent addition (the least
% significant sectioning command) at the top.  The order must be
% reversed in order to access the most important items first, so it
% can be printed out.  Through all of this, the main stack must not
% be persistently altered.

% Copy the breadcrumbs stack into temporary stack A and then reverse
% it into temporary stack B.  This kills two birds with two stones;
% (Ha!) while potentially a little slower (I've yet to think of a
% faster solution), it never touches the main stack, ensuring it
% isn't altered.
  \set_seq_eq:NN \g_tmpa_seq \breadcrumb_stack_seq
  
% While stack A has items in it, pop that item and push it into
% stack B.  For good measure, clear stack A when we're done.
  \bool_while_do:NN { ! \seq_if_empty:N \g_tmpa_seq }
  {
    \seq_pop:NN \g_tmpa_seq \l_tmpa_tl
    \seq_push:Nn \l_tmpa_tl \g_tmpb_seq
  }
  \seq_clear:N \g_tmpa_seq

% Join stack B as a token list, items separated by
% \cs{breadcrumb\_separation\_symbol}

% Build the breadcrumb and place it into the input stream
  \bool_set_false:N \l_tmpa_bool
  \seq_map_function:NN \breadcrumb_stack_seq \breadcrumb_build_breadcrumb_process:n
 }

% from 40613
\cs_new_protected:Npn \breadcrumb_build_breadcrumb_process:n #1
 {
  \bool_if:NTF \l_tmpa_bool
  { \l_breadcrumb_sep_tl } 
  { \bool_set_true:N \l_tmpa_bool } 
  \tl_if_empty:nTF { #1 } {EMPTY~ARGUMENT!} { #1 }
  % If this is the first item in the list, this variable will be false.
  % So if it isn't false, we need the separator
  % and if it is, well, the next one definitely won't be first.
  % Finally, check against if we have an empty sectioning command
 }

% TODO: SHOULD BE MULTILEVEL FOR OUTPUT ROUTINE AND OUTPUT PARAMETERS
\NewDocumentCommand{\BreadcrumbSet}{m}
 {
  \keys_set:nn { breadcrumb } { #1 }
 }
% font: the font of the breadcrumb
% sep: the separator for each element
% depth: the depth to which to output
\keys_define:nn { breadcrumb }
 {
  font  .tl_set:N  = \l_breadcrumb_font_tl,
  sep   .tl_set:N  = \l_breadcrumb_sep_tl,
  depth .int_set:N = \l_breadcrumb_depth_int,
 }
\keys_set:nn { breadcrumb }
 {
  font  = \sffamily,
  sep   = {\,\textbf{\guilsinglright}\hspace{0pt}\,},
  depth = 2
 }

% Will \let\ps@plain\ps@fancy
% \cs_gset_eq:NN \ps@plain \ps@fancy

\let\myhook\AtBeginShipout
\NewDocumentCommand{\AtBeginPage}{m}{
  % Execute the given block of code /just/ before output begins to be
  % written.
  \add_hook_at_begin_write_first:n { #1 }
}
% implement as sequence
\seq_new:N \g_begin_page_hook_seq
\cs_new_protected:Npn \add_hook_at_begin_write_first:n #1
 {
   \seq_put_left:Nn \g_begin_page_hook_seq { #1 }
 }
\cs_new_protected:Npn \add_hook_at_begin_write_last:n #1
 {
   \seq_put_right:Nn \g_begin_page_hook_seq { #1 }
 }

% Extreme kudos to egreg for the following generalization: (#122823)
% An indispensable starting point for the entire thing.

 %\myhook{\pagestyle{breadcrumb}}
% Macro to insert labels at the end of other macros

\NewDocumentCommand{\labelize}{mm}
{
  \breadcrumbs_labelize:Nn #1 { #2 }
}
\cs_new_protected:Npn \breadcrumbs_labelize:Nn #1 #2 {
  \bool_new:c { g_breadcrumbs_in_#2 }
  \myhook{
    \bool_set_false:c { g_breadcrumbs_in_#2 }:
  }

  \cs_set_eq:cN { original_ \cs_to_str:N #1 } #1
  \RenewDocumentCommand #1 { som }
  {
    % Put page style stuff here
    \bool_set_true:c { g_breadcrumbs_in_#2 }
 %   \thispagestyle{#2:style}
    \IfBooleanTF{##1}
    {
      \use:c { original_ \cs_to_str:N #1 }*{##3}
    }
    {
      \IfNoValueTF{##2}
      {
        \use:c { original_ \cs_to_str:N #1 } {##3}
      }
      {
        \use:c { original_ \cs_to_str:N #1 } [##2]{##3}
      }
      \label{breadcrumb:#2:\use:c{the\cs_to_str:N #1}}%
    }
  }
}

% Much nicer syntax.  Thanks, egreg!

\ExplSyntaxOff
%    \end{macrocode}
%
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%\Finale


